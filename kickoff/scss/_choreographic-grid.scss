//  ==============================
//  === THE CHOREOGRAPHIC GRID ===
//  ==============================
//  GRID CALCULATIONS
//  GRID SETUP
//  MEDIA QUERIES
//   - ALPHA
//   - BETA
//  GRID UTILITIES
//  CENTRED COLUMNS

// Basic Usage
// <div class="row">
// 	<div class="col span12"></div>
// </div>

//  =========================
//  === GRID CALCULATIONS ===
//  =========================
@mixin columns($columnSpan: 1) {
	width: ($gridColumnWidth * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1));
}
@mixin shunt($shuntSpan: 1) {
	margin-right: ($gridColumnWidth * $shuntSpan) + ($gridGutterWidth * ($shuntSpan - 1));
}
@mixin offset($columnOffset: 1) {
	margin-left: ($gridColumnWidth * $columnOffset) + ($gridGutterWidth * $columnOffset) + $gridGutterWidth;
}
@mixin offsetFirstChild($columnOffset: 1) {
	margin-left: ($gridColumnWidth * $columnOffset) + ($gridGutterWidth * $columnOffset);
}
@mixin push($pushOffset: 1) {
	left: ($gridColumnWidth * $pushOffset) + ($gridGutterWidth * $pushOffset);
}
@mixin pull($pullOffset: 1) {
	right: ($gridColumnWidth * $pullOffset) + ($gridGutterWidth * $pullOffset);
}
@mixin gridColumn() {
	margin-left: $gridGutterWidth;
	float: left;
	min-height: 1px;
	position: relative;
	clear: none;
	&:first-child {
		margin-left: 0;
	}
}
@mixin media-query($mq-title, $bgcolor: fadeout(yellow, 40%)) {
	content: $mq-title;
	position: fixed;
	top: 0;
	right: 0;
	left: 0;
	height: 30px;
	@include line-height(30);
	background-color: $bgcolor;
	display: block;
	text-align: center;
	font-weight: bold;
	z-index: 1000;
}

//  ==================
//  === GRID SETUP ===
//  ==================
$gridColumnWidth: 4.3%;
$gridGutterWidth: 4.4%;
$gridMaxWidth: 1200px;
$gridMargin: 32px; // === Space outside the grid

.container {
	padding-left: $gridMargin;
	padding-right: $gridMargin;
	width: 95%;
	max-width: 1500px;
	margin: 0 auto;
}

.row {
	width: 100%;
	margin: 0 auto;
	@include clearfix;

	// Nested rows
	& .row {
		min-width: 0;
	}
}





// body:before {
// 	.media-query("mobile", fadeout(yellow, 40%));
// }

// ===========================================
// === Media queries for responsive design ===
// ===========================================

// === 768> ===
@include respond-min(768px) {
	// body:before {
	// 	.media-query("mq-alpha", fadeout(green, 40%));
	// }

	.col {
		@include gridColumn;
	}

	// HACK/FIX FOR WEBKIT'S INADEQUATE SUBPIXEL PERCENTAGE CALCULATIONS
	// In order to work around browsers' different rounding behaviours, Foundation will float the last column in a row to the right so the edge aligns. If your row doesn't have a count that adds up to 12 columns you can tag the last column with class="end" in order to override that behaviour.
	[class*="col"] + [class*="col"]:last-child, .mq-alpha-end { float: right; }
	[class*="col"] + [class*="col"].end { float: left; }

	.span1 , .mq-alpha-resize-to1  { @include columns(1);  }
	.span2 , .mq-alpha-resize-to2  { @include columns(2);  }
	.span3 , .mq-alpha-resize-to3  { @include columns(3);  }
	.span4 , .mq-alpha-resize-to4  { @include columns(4);  }
	.span5 , .mq-alpha-resize-to5  { @include columns(5);  }
	.span6 , .mq-alpha-resize-to6  { @include columns(6);  }
	.span7 , .mq-alpha-resize-to7  { @include columns(7);  }
	.span8 , .mq-alpha-resize-to8  { @include columns(8);  }
	.span9 , .mq-alpha-resize-to9  { @include columns(9);  }
	.span10, .mq-alpha-resize-to10 { @include columns(10); }
	.span11, .mq-alpha-resize-to11 { @include columns(11); }
	.span12, .mq-alpha-resize-to12 { @include columns(12); }

	//  ==============================================
	//  === OFFSET & SOURCE ORDERING (PUSH & PULL) ===
	//  ==============================================
	.row {
		& > .offset1 {
			@include offset(1);
			&:first-child {
				@include offsetFirstChild(1);
			}
		}
		& > .offset2 {
			@include offset(2);
			&:first-child {
				@include offsetFirstChild(2);
			}
		}
		& > .offset3 {
			@include offset(3);
			&:first-child {
				@include offsetFirstChild(3);
			}
		}
		& > .offset4 {
			@include offset(4);
			&:first-child {
				@include offsetFirstChild(4);
			}
		}
		& > .offset5 {
			@include offset(5);
			&:first-child {
				@include offsetFirstChild(5);
			}
		}
		& > .offset6 {
			@include offset(6);
			&:first-child {
				@include offsetFirstChild(6);
			}
		}
		& > .offset7 {
			@include offset(7);
			&:first-child {
				@include offsetFirstChild(7);
			}
		}
		& > .offset8 {
			@include offset(8);
			&:first-child {
				@include offsetFirstChild(8);
			}
		}
		& > .offset9 {
			@include offset(9);
			&:first-child {
				@include offsetFirstChild(9);
			}
		}
		& > .offset10 {
			@include offset(10);
			&:first-child {
				@include offsetFirstChild(10);
			}
		}
		& > .offset11 {
			@include offset(11);
			&:first-child {
				@include offsetFirstChild(11);
			}
		}
		& > .offset12 {
			@include offset(12);
			&:first-child {
				@include offsetFirstChild(12);
			}
		}

		& > .push2 	  	{ @include push(2); }
		& > .push3 		{ @include push(3); }
		& > .push4 		{ @include push(4); }
		& > .push5 		{ @include push(5); }
		& > .push6 		{ @include push(6); }
		& > .push7 		{ @include push(7); }
		& > .push8 		{ @include push(8); }
		& > .push9 		{ @include push(9); }
		& > .push10	 	{ @include push(10); }

		& > .pull2 		{ @include pull(2); }
		& > .pull3 		{ @include pull(3); }
		& > .pull4 		{ @include pull(4); }
		& > .pull5 		{ @include pull(5); }
		& > .pull6 		{ @include pull(6); }
		& > .pull7 		{ @include pull(7); }
		& > .pull8 		{ @include pull(8); }
		& > .pull9 		{ @include pull(9); }
		& > .pull10	 	{ @include pull(10); }
	}

	//  ====================================
	//  === SPLITTING COLUMNS & SHUNTING ===
	//  ====================================
	.split .col, .shunt {
		float:none;
		margin-left: 0;
		min-height: 1px;
		position: relative;
		width: 100%;
		clear: both;
	}
}
// === end 768> ===



// === 992> ===
@include respond-min(992px) {
	// body:before {
	// 	.media-query("mq-beta", fadeout(teal, 40%));
	// }

	//  ====================
	//  === CHOREOGRAPHY ===
	//  ====================
	.split .col, .shunt {
		@include gridColumn;
	}

	//  ============
	//  === INFO ===
	//  ============
	// I need to restate the grid widths & offsets in this media-query because of the cascade. For example, if I add .mq-alpha-resize-to8 to a column in mq-alpha & I need the the same column to return to it's 'natural' width (.span6 for example) in the wider media-query, there is no other way, that I can see, to do that. One thought I had was to add a body class, using javascript, stating which media-query is currently being viewed, then I can just use that to apply the relevant class. Not sure about this though.

	.span1 , .mq-beta-resize-to1 , .split .span1  { @include columns(1);  }
	.span2 , .mq-beta-resize-to2 , .split .span2  { @include columns(2);  }
	.span3 , .mq-beta-resize-to3 , .split .span3  { @include columns(3);  }
	.span4 , .mq-beta-resize-to4 , .split .span4  { @include columns(4);  }
	.span5 , .mq-beta-resize-to5 , .split .span5  { @include columns(5);  }
	.span6 , .mq-beta-resize-to6 , .split .span6  { @include columns(6);  }
	.span7 , .mq-beta-resize-to7 , .split .span7  { @include columns(7);  }
	.span8 , .mq-beta-resize-to8 , .split .span8  { @include columns(8);  }
	.span9 , .mq-beta-resize-to9 , .split .span9  { @include columns(9);  }
	.span10, .mq-beta-resize-to10, .split .span10 { @include columns(10); }
	.span11, .mq-beta-resize-to11, .split .span11 { @include columns(11); }
	.span12, .mq-beta-resize-to12, .split .span12 { @include columns(12); }

	.row {
		& > .offset1 {
			@include offset(1);
			&:first-child {
				@include offsetFirstChild(1);
			}
		}
		& > .offset2 {
			@include offset(2);
			&:first-child {
				@include offsetFirstChild(2);
			}
		}
		& > .offset3 {
			@include offset(3);
			&:first-child {
				@include offsetFirstChild(3);
			}
		}
		& > .offset4 {
			@include offset(4);
			&:first-child {
				@include offsetFirstChild(4);
			}
		}
		& > .offset5 {
			@include offset(5);
			&:first-child {
				@include offsetFirstChild(5);
			}
		}
		& > .offset6 {
			@include offset(6);
			&:first-child {
				@include offsetFirstChild(6);
			}
		}
		& > .offset7 {
			@include offset(7);
			&:first-child {
				@include offsetFirstChild(7);
			}
		}
		& > .offset8 {
			@include offset(8);
			&:first-child {
				@include offsetFirstChild(8);
			}
		}
		& > .offset9 {
			@include offset(9);
			&:first-child {
				@include offsetFirstChild(9);
			}
		}
		& > .offset10 {
			@include offset(10);
			&:first-child {
				@include offsetFirstChild(10);
			}
		}
		& > .offset11 {
			@include offset(11);
			&:first-child {
				@include offsetFirstChild(11);
			}
		}
		& > .offset12 {
			@include offset(12);
			&:first-child {
				@include offsetFirstChild(12);
			}
		}

		& > .mq-beta-push2, .push2    	{ @include push(2); }
		& > .mq-beta-push3, .push3 		{ @include push(3); }
		& > .mq-beta-push4, .push4 		{ @include push(4); }
		& > .mq-beta-push5, .push5 		{ @include push(5); }
		& > .mq-beta-push6, .push6 		{ @include push(6); }
		& > .mq-beta-push7, .push7 		{ @include push(7); }
		& > .mq-beta-push8, .push8 		{ @include push(8); }
		& > .mq-beta-push9, .push9 		{ @include push(9); }
		& > .mq-beta-push10, .push10 	{ @include push(10); }

		& > .mq-beta-pull2, .pull2 		{ @include pull(2); }
		& > .mq-beta-pull3, .pull3 		{ @include pull(3); }
		& > .mq-beta-pull4, .pull4 		{ @include pull(4); }
		& > .mq-beta-pull5, .pull5 		{ @include pull(5); }
		& > .mq-beta-pull6, .pull6 		{ @include pull(6); }
		& > .mq-beta-pull7, .pull7 		{ @include pull(7); }
		& > .mq-beta-pull8, .pull8 		{ @include pull(8); }
		& > .mq-beta-pull9, .pull9 		{ @include pull(9); }
		& > .mq-beta-pull10, .pull10 	{ @include pull(10); }
	}

	.mq-beta-end { float: right; }
	.mq-alpha-end { float: left; }


}
// === end 992> ===


// === 1382> ===
@include respond-min(1382px) {

}
// === end 1382> ===


//  =======================
//  === CENTRED COLUMNS ===
//  =======================
.centered.col, .centred.col { float: none; margin: 0 auto; }


