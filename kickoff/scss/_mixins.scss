// ===================
// === MIXINS.scss ===
// ===================
// RESPONSIVE
// CSS3
// UTILITY MIXINS
// FORMS

// =========================
// === RESPONSIVE MIXINS ===
// =========================
$fix-mqs: false !default; //assign false if no value set already

@mixin respond-min($width) {
	$width-em: $width / $baseFontSize + em;

	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs >= $width {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media screen and (min-width: $width-em) {
			@content;
		}
	}
}
@mixin respond-max($width) {
	$width-em: $width / $baseFontSize + em;

	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs <= $width {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media screen and (max-width: $width-em) {
			@content;
		}
	}
}
@mixin respond-min-max($minwidth, $maxwidth) {
	$minwidth-em: $minwidth / $baseFontSize + em;
	$maxwidth-em: $maxwidth / $baseFontSize + em;

	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs >= $minwidth and $fix-mqs <= $maxwidth {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media screen and (min-width: $minwidth-em) and (max-width: $maxwidth-em) {
			@content;
		}
	}
}

$old-ie: false !default;

@mixin old-ie {
	// Only use this content if we're dealing with old IE
	@if $old-ie {
		@content;
	}
}

// ============
// === CSS3 ===
// ============

// BORDER RADIUS
// @include border-radius(10px);
// @include border-radius(10px 10px 5px 20px);
// @include border-radius(TL TR BR BL);
@mixin border-radius($radius: 5px) {
-webkit-border-radius: $radius;
	@if $support-FF36 == true {
		-moz-border-radius: $radius;
	}
	 -o-border-radius: $radius;
		border-radius: $radius;
}

// DROP SHADOWS
// @include box-shadow(0 1px 3px rgba(0,0,0,.25));
@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
-webkit-box-shadow: $shadow;
   -moz-box-shadow: $shadow;
	 -o-box-shadow: $shadow;
		box-shadow: $shadow;
}

// TRANSITIONS
// @include transition(all 0.2s ease-in-out)
@mixin transition($transition: all 0.2s ease-in-out) {
-webkit-transition: $transition;
   -moz-transition: $transition;
	 -o-transition: $transition;
		transition: $transition;
}

// CSS3 CONTENT COLUMNS
@mixin content-columns($columnCount:2, $columnGap: 20px) {
-webkit-column-count: $columnCount;
-webkit-column-gap:   $columnGap;
   -moz-column-count: $columnCount;
   -moz-column-gap:   $columnGap;
		column-count: $columnCount;
		column-gap:   $columnGap;
}

// BACKGROUND CLIPPING
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
// @include background-clip(padding-box);
@mixin background-clip($clip: padding-box) {
-webkit-background-clip: $clip;
	@if $support-FF36 == true {
		-moz-background-clip: $clip;
	}
	 -o-background-size: $clip;
		background-clip: $clip;
}

// OPACITY
// @include opacity(50);
@mixin opacity($opacity: 100) {
	zoom: 1;
	filter: alpha(opacity=$opacity);
	opacity: $opacity / 100;
}

// Background sizing
// @include background-size(50px 40px);
@mixin background-size($size: contain) {
-webkit-background-size: $size;
   -moz-background-size: $size;
	 -o-background-size: $size;
		background-size: $size;
}

// Box sizing
// @include box-sizing(border-box);
@mixin box-sizing($boxmodel: border-box) {
-webkit-box-sizing: $boxmodel;
   -moz-box-sizing: $boxmodel;
	-ms-box-sizing: $boxmodel;
		box-sizing: $boxmodel;
}
// USER SELECT
// @include user-select(none)
@mixin user-select($select: none) {
-webkit-user-select: $select;
   -moz-user-select: $select;
	 -o-user-select: $select;
		user-select: $select;
}

// VERTICAL ALIGN
// @include vertical-align(50px);
@mixin vertical-align($argument) {
	line-height: $argument;
	height: $argument;
}

// TEXT TRUNCATION
// @include truncate(300px);
// @include truncate(100%);
@mixin truncate($truncation-boundary){
	max-width:$truncation-boundary;
	white-space:nowrap;
	overflow:hidden;
	text-overflow:ellipsis;
}

// TRANSFORMS
// @include transform(scale(1.2));
@mixin transform($transform: scale(1.2)) {
-webkit-transform: $transform;
   -moz-transform: $transform;
	 -o-transform: $transform;
		transform: $transform;
}

// @include scale(1.2);
@mixin scale($factor: 1.2) {
-webkit-transform: scale($factor);
   -moz-transform: scale($factor);
	-ms-transform: scale($factor);
	 -o-transform: scale($factor);
		transform: scale($factor);
}

// @include rotate(10deg);
@mixin rotate($deg) {
-webkit-transform: rotate($deg);
   -moz-transform: rotate($deg);
	-ms-transform: rotate($deg);
	 -o-transform: rotate($deg);
		transform: rotate($deg);
}

// @include skew(30deg, 20deg);
@mixin skew($deg, $deg2) {
-webkit-transform: skew($deg, $deg2);
   -moz-transform: skew($deg, $deg2);
	-ms-transform: skew($deg, $deg2);
	 -o-transform: skew($deg, $deg2);
		transform: skew($deg, $deg2);
}

// @include translate(100px, 20px);
// @include translate(x, y);
@mixin translate($x:0, $y:0) {
-webkit-transform: translate($x, $y);
   -moz-transform: translate($x, $y);
	-ms-transform: translate($x, $y);
	 -o-transform: translate($x, $y);
		transform: translate($x, $y);
}

// @include translate(100px, 20px, 10px);
// @include translate(x, y, z);
@mixin translate3d($x, $y: 0, $z: 0) {
-webkit-transform: translate3d($x, $y, $z);
   -moz-transform: translate3d($x, $y, $z);
	-ms-transform: translate3d($x, $y, $z);
	 -o-transform: translate3d($x, $y, $z);
		transform: translate3d($x, $y, $z);
}

// @include perspective(100);
@mixin perspective($value: 1000) {
-webkit-perspective: $value;
   -moz-perspective: $value;
	-ms-perspective: $value;
		perspective: $value;
}

// @include transform-origin(center, center);
@mixin transform-origin($x:center, $y:center) {
-webkit-transform-origin: $x $y;
   -moz-transform-origin: $x $y;
	-ms-transform-origin: $x $y;
	 -o-transform-origin: $x $y;
		transform-origin: $x $y;
}

// ANIMATION
@mixin animation($name, $duration: 300ms, $delay: 0, $ease: ease) {
-webkit-animation: $name $duration $delay $ease;
   -moz-animation: $name $duration $delay $ease;
	-ms-animation: $name $duration $delay $ease;
		animation: $name $duration $delay $ease;
}

// GRADIENTS
@mixin gradient-horizontal($start-color, $end-color) {
	background-color: $end-color;
	background-repeat: repeat-x;
	background-image: -khtml-gradient(linear, left top, right top, from($start-color), to($end-color)); /* Konqueror */
	background-image: -moz-linear-gradient(left, $start-color, $end-color); /* FF 3.6+ */
	background-image: -ms-linear-gradient(left, $start-color, $end-color); /* IE10 */
	background-image: -webkit-gradient(linear, left top, right top, color-stop(0%, $start-color), color-stop(100%, $end-color)); /* Safari 4+, Chrome 2+ */
	background-image: -webkit-linear-gradient(left, $start-color, $end-color); /* Safari 5.1+, Chrome 10+ */
	background-image: -o-linear-gradient(left, $start-color, $end-color); /* Opera 11.10 */
	background-image: -ms-linear-gradient(left, $start-color 0%, $end-color 100%);  /* IE10+ */
	background-image: linear-gradient(left, $start-color, $end-color); /* the standard */
	@if $disable-filters == false {
		filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=1)"; /* IE6 & IE7 */
		-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=1)"; /* IE8+ */
	}
}
@mixin gradient-vertical($start-color, $end-color) {
	background-color: $end-color;
	background-repeat: repeat-x;
	background-image: -khtml-gradient(linear, left top, left bottom, from($start-color), to($end-color)); /* Konqueror */
	background-image: -moz-linear-gradient($start-color, $end-color); /* FF 3.6+ */
	background-image: -ms-linear-gradient($start-color, $end-color); /* IE10 */
	background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $start-color), color-stop(100%, $end-color)); /* Safari 4+, Chrome 2+ */
	background-image: -webkit-linear-gradient($start-color, $end-color); /* Safari 5.1+, Chrome 10+ */
	background-image: -o-linear-gradient($start-color, $end-color); /* Opera 11.10 */
	background-image: -ms-linear-gradient(top, $start-color 0%, $end-color 100%);  /* IE10+ */
	background-image: linear-gradient($start-color, $end-color); /* the standard */
	@if $disable-filters == false {
		filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=0)"; /* IE6 & IE7 */
		-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=0)"; /* IE8+ */
	}
}
@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
	background-color: mix($midColor, $endColor, 80%);
	background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
	background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
	background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
	background-image: -ms-linear-gradient($startColor, $midColor $colorStop, $endColor);
	background-image: -o-linear-gradient($startColor, $midColor $colorStop, $endColor);
	background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
	background-repeat: no-repeat;
}
@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
	background-color: $endColor;
	background-repeat: repeat-x;
	background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
	background-image: -ms-linear-gradient($deg, $startColor, $endColor); // IE10
	background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 11.10
	background-image: linear-gradient($deg, $startColor, $endColor); // The standard
}
@mixin gradient-radial($innerColor: #555, $outerColor: #333) {
	background-color: $outerColor;
	background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
	background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
	background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
	background-image: -ms-radial-gradient(circle, $innerColor, $outerColor);
	background-repeat: no-repeat;
	// Opera cannot do radial gradients yet
}
@mixin gradient-striped($color, $angle: -45deg) {
	background-color: $color;
	background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
	background-image: -webkit-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
	background-image: -moz-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
	background-image: -ms-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
	background-image: -o-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
	background-image: linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
}

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($primaryColor, $secondaryColor) {
	@include gradient-vertical($primaryColor, $secondaryColor);
	border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
	border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fadein(rgba(0,0,0,.1), 15%);
}

// ======================
// === UTILITY MIXINS ===
// ======================

// CLEARFIX
@mixin clearfix {
	*zoom: 1;
	&:before,
	&:after {
		display: table;
		content: " ";
		zoom: 1;
	}
	&:after {
		clear: both;
	}
}

// ===================
// === FONT MIXINS ===
// ===================
// REM FONT SIZE
// @include font-size(16);
@mixin font-size($sizeValue: $baseFontSize){
	$remValue: ($sizeValue / $baseFontSize);
	font-size: $sizeValue + px;
	font-size: $remValue + rem;
}

// REM LINE HEIGHT
// @include line-height(16);
@mixin line-height($sizeValue: $baseLineHeight){
	$remValue: ($sizeValue / $baseFontSize);
	line-height: $sizeValue + px;
	line-height: $remValue + rem;
}

// EM FONT SIZE
@mixin font-size-ems($target-px-size, $context-px-size:$base-font-size) {
	font-size: ($target-px-size / $context-px-size) * 1em;
}

// ==================
// === REM MIXINS === NEED TO CHANGE TO IF STATEMENTS NOW
// ==================
// @include rem(font-size, 16);
// @include rem($sizeValue: $baseFontSize){
// 	$remValue: ($sizeValue / $baseFontSize);
// 	font-size: $sizeValue + px;
// 	font-size: $remValue + rem;
// }

// @include rem(line-height, 16);
// @include rem($sizeValue: $baseFontSize){
// 	$remValue: ($sizeValue / $baseFontSize);
// 	line-height: $sizeValue + px;
// 	line-height: $remValue + rem;
// }

// @include rem(margin, 16);
// @include rem($sizeValue: $baseFontSize){
// 	$remValue: ($sizeValue / $baseFontSize);
// 	margin: $sizeValue + px;
// 	margin: $remValue + rem;
// }

// @include rem(padding, 16);
// @include rem($sizeValue: $baseFontSize){
// 	$remValue: ($sizeValue / $baseFontSize);
// 	padding: $sizeValue + px;
// 	padding: $remValue + rem;
// }



@mixin font-face( $family-name, $font-path, $font-weight:normal, $font-style:normal, $include-svg:false ) {
	@font-face {
		font-family: $family-name;
		src: url('${font-path}.eot');
		src: url('${font-path}.eot?#iefix') format('embedded-opentype'),
			 url('${font-path}.woff') format('woff'),
			 url('${font-path}.ttf') format('truetype'),
			 url('${font-path}.svg#{$family-name}') format('svg');
		font-weight: $font-weight;
		font-style: $font-style;
	}
}



// CENTRE-ALIGN A BLOCK LEVEL ELEMENT
// @extend %center-block
// #context a%center-block
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#placeholders
%center-block {
	display: block;
	margin: 0 auto;
}

// SIZING SHORTCUTS
// @include size(10px, 30px);
@mixin size($width: 5px, $height: 5px) {
	height: $height;
	width: $width;
}

// @include square(50px);
@mixin square($size: 5px) {
	@include size($size, $size);
}

// INPUT PLACEHOLDER TEXT
@mixin placeholder($color: $grayLight) {
	:-moz-placeholder {
		color: $color;
	}
	::-webkit-input-placeholder {
		color: $color;
	}
}

@mixin tab-focus() {
	// Default
	outline: thin dotted #333;
	// Webkit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// Make any element resizable for prototyping
@mixin resizable($direction: both) {
	resize: $direction; // Options are horizontal, vertical, both
	overflow: auto; // Safari fix
}


// =============
// === FORMS ===
// =============
// Block level inputs
@mixin input-block-level {
	display: block;
	width: 100%;
	min-height: 28px; /* Make inputs at least the height of their button counterpart */
	/* Makes inputs behave like true block-level elements */
	@include box-sizing(border-box);
}

// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {
	// Set the text color
	> label,
	.help-block,
	.help-inline {
		color: $textColor;
	}
	// Style inputs accordingly
	input,
	select,
	textarea {
		color: $textColor;
		border-color: $borderColor;
		&:focus {
		border-color: darken($borderColor, 10%);
		@include box-shadow(0 0 6px lighten($borderColor, 20%));
		}
	}
	// Give a small background color for input-prepend/-append
	.input-prepend .add-on,
	.input-append .add-on {
		color: $textColor;
		background-color: $backgroundColor;
		border-color: $textColor;
	}
}


// Table columns
@mixin tableColumns($columnSpan: 1) {
	float: none; // undo default grid column styles
	width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
	margin-left: 0; // undo default grid column styles
}

// ========================
// === COMPONENT MIXINS ===
// ========================
@mixin buttonBackground($startColor, $endColor) {
	// gradientBar will set the background to a pleasing blend of these, to support IE<=9
	@include gradientBar($startColor, $endColor);
	@include reset-filter();
	*background-color: $endColor; /* Darken IE7 buttons by default so they stand out more given they won't have borders */

	// in these cases the gradient won't cover the background, so we override
	&:hover, &:active, &.active, &.disabled, &[disabled] {
		background-color: $endColor;
		*background-color: darken($endColor, 5%);
	}

	// IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
	&:active,
	&.active {
		background-color: darken($endColor, 10%) e("\9");
	}
}

// =====================
// === BROWSER FIXES ===
// =====================
// IE7 INLINE-BLOCK
@mixin ie7-inline-block() {
	*display: inline; /* IE7 inline-block hack */
	*zoom: 1;
}

@mixin inline-block() {
	display: inline-block;

	@if $using-ieclasses == true {
		.lt-ie8 & {
			display: inline;
			zoom: 1;
		}
	} @else {
		*display: inline;
		*zoom: 1;
	}
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
	*margin-left: .3em;
	&:first-child {
		*margin-left: 0;
	}
}
@mixin ie7-restore-right-whitespace() {
	*margin-right: .3em;
	&:last-child {
		*margin-left: 0;
	}
}
// Reset filters for IE
@mixin reset-filter() {
	filter: "progid:DXImageTransform.Microsoft.gradient(enabled = false)";
}
